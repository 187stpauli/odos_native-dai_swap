from configvalidator import ConfigValidator
from typing import Dict, Any, Optional
from client import Client
import requests
import asyncio
import json


class Odos:
    def __init__(self, client: Client) -> None:
        self.client = client

    # –ê–ø—Ä—É–≤ –¥–ª—è Odos
    async def check_and_approve(self) -> None:
        try:
            max_uint256 = 2 ** 256 - 1
            with open("erc20_abi.json") as f:
                erc20_abi = json.load(f)

            contract = await self.client.get_contract(
                contract_address=self.client.from_address, abi=erc20_abi
            )

            allowance = await contract.functions.allowance(
                self.client.address,
                self.client.router_address
            ).call()

            if allowance == 0:
                print("‚ö†Ô∏è –ù–µ—Ç –∞–ø—Ä—É–≤–∞! –û—Ç–ø—Ä–∞–≤–ª—è–µ–º approve —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é...")

                tx = await contract.functions.approve(
                    self.client.router_address,
                    max_uint256
                ).build_transaction({
                    "from": self.client.address,
                    "nonce": await self.client.w3.eth.get_transaction_count(self.client.address),
                    "gas": 60000,
                    "gasPrice": await self.client.w3.eth.gas_price,
                    "chainId": await self.client.w3.eth.chain_id
                })

                signed_tx = self.client.w3.eth.account.sign_transaction(tx, self.client.private_key)
                tx_hash = await self.client.w3.eth.send_raw_transaction(signed_tx.rawTransaction)
                print(f"üöÄ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è approve: {tx_hash.hex()}")
                receipt = await self.client.w3.eth.wait_for_transaction_receipt(tx_hash)
                print(f"‚úÖ Approve –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω: {receipt.transactionHash.hex()}\n")
            else:
                print("‚úÖ Approve —É–∂–µ –µ—Å—Ç—å, –≤—Å—ë –æ–∫!\n")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ approve: {e}")
            exit(1)

    # –í—Ä–∞–ø –Ω–∞—Ç–∏–≤–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
    async def wrap_native(self) -> None:
        try:
            wrap_abi = [
                {
                    "inputs": [],
                    "name": "deposit",
                    "outputs": [],
                    "stateMutability": "payable",
                    "type": "function"
                }
            ]
            address = self.client.address
            amount = self.client.to_wei_main(self.client.amount, 18)

            balance = await self.client.w3.eth.get_balance(address)
            gas_cost = await self.client.get_tx_fee()
            total_needed = amount + gas_cost
            if balance < total_needed:
                print(
                    f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—Ä–∞–ø–∞. –ë–∞–ª–∞–Ω—Å: {self.client.from_wei_main(balance, 18)} ETH, "
                    f"—Ç—Ä–µ–±—É–µ—Ç—Å—è: {self.client.from_wei_main(total_needed, 18)} ETH (—Å —É—á—ë—Ç–æ–º –≥–∞–∑–∞)."
                )
                exit(1)

            weth = await self.client.get_contract(contract_address=self.client.from_address, abi=wrap_abi)

            tx = await weth.functions.deposit().build_transaction({
                "from": address,
                "value": amount,
                "nonce": await self.client.w3.eth.get_transaction_count(address),
                "gas": 100000,
                "gasPrice": await self.client.w3.eth.gas_price,
                "chainId": await self.client.w3.eth.chain_id
            })

            signed_tx = self.client.w3.eth.account.sign_transaction(tx, private_key=self.client.private_key)
            tx_hash = await self.client.w3.eth.send_raw_transaction(signed_tx.rawTransaction)
            print(f"üöÄ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–∞ –≤—Ä–∞–ø: {tx_hash.hex()}\n")
            receipt = await self.client.w3.eth.wait_for_transaction_receipt(tx_hash)
            print(f"‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–∞ –≤—Ä–∞–ø –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞: {receipt.transactionHash.hex()}\n")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ä–∞–ø–µ —Ç–æ–∫–µ–Ω–∞: {e}")
            exit(1)

    # –ü–æ–ª—É—á–µ–Ω–∏–µ quote —á–µ—Ä–µ–∑ Odos API
    async def get_quote(self) -> Dict[str, Any]:
        try:
            url = "https://api.odos.xyz/sor/quote/v2"
            amount = self.client.amount
            params = {
                "chainId": self.client.chain_id,
                "inputTokens": [
                    {
                        "tokenAddress": str(self.client.from_address),
                        "amount": str(self.client.to_wei_main(amount, 18)),
                    }
                ],
                "outputTokens": [
                    {
                        "tokenAddress": f"{self.client.to_address}",
                        "proportion": 1
                    }
                ],
                "slippageLimitPercent": 0.5,
                "userAddr": self.client.address
            }

            proxies = {
                "http": f"http://{self.client.proxy}",
                "https": f"http://{self.client.proxy}"
            }

            try:
                response = requests.post(url, json=params, proxies=proxies, timeout=15)
                response.raise_for_status()
            except requests.exceptions.Timeout:
                print("‚è±Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç Odos API.")
                exit(1)
            except requests.exceptions.RequestException as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Odos API: {e}")
                exit(1)
            return response.json()

        except requests.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ—Ç–∏—Ä–æ–≤–∫–∏: {e}")
            exit(1)

    # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ calldata —á–µ—Ä–µ–∑ assemble
    async def assemble(self, quote: Dict[str, Any]) -> Dict[str, Any]:
        try:
            assemble_url = "https://api.odos.xyz/sor/assemble"
            assemble_request_body = {
                "pathId": quote["pathId"],
                "userAddr": str(self.client.address)
            }

            proxies = {
                "http": f"http://{self.client.proxy}",
                "https": f"http://{self.client.proxy}"
            }
            try:
                response = requests.post(
                    assemble_url,
                    headers={"Content-Type": "application/json"},
                    json=assemble_request_body,
                    proxies=proxies,
                    timeout=15
                )

                response.raise_for_status()
            except requests.exceptions.Timeout:
                print("‚è±Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç Odos API.")
                exit(1)
            except requests.exceptions.RequestException as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Odos API: {e}")
                exit(1)
            return response.json()

        except requests.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e}")
            exit(1)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–∞ —Å–≤–∞–ø
    async def swap(self, build_data: Dict[str, Any]) -> Optional[str]:
        try:
            amount = self.client.to_wei_main(self.client.amount, 18)

            balance = await self.client.get_erc20_balance()
            gas_cost = await self.client.get_tx_fee()
            total_needed = amount + gas_cost
            if balance < total_needed:
                print(
                    f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å–≤–∞–ø–∞. –ë–∞–ª–∞–Ω—Å: {self.client.from_wei_main(balance, 18)} ETH, "
                    f"—Ç—Ä–µ–±—É–µ—Ç—Å—è: {self.client.from_wei_main(total_needed, 18)} ETH (—Å —É—á—ë—Ç–æ–º –≥–∞–∑–∞)."
                )
                exit(1)

            tx_data = build_data["transaction"]

            tx = {
                "to": tx_data["to"],
                "from": tx_data["from"],
                "value": 0,
                "data": tx_data["data"],
                "chainId": tx_data["chainId"],
                "gas": tx_data["gas"],
                "gasPrice": tx_data["gasPrice"],
                "nonce": tx_data["nonce"],
            }

            signed_tx = self.client.w3.eth.account.sign_transaction(tx, self.client.private_key)
            print("‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–Ω–∞!\n")
            tx_hash = await self.client.w3.eth.send_raw_transaction(signed_tx.rawTransaction)
            print("‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!\n")
            return tx_hash.hex()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e}")
            exit(1)

    # –§—É–Ω–∫—Ü–∏—è —Å–±–æ—Ä–∫–∏ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π
    async def execute(self) -> None:
        await self.check_and_approve()
        await self.wrap_native()
        await asyncio.sleep(0.5)
        quote = await self.get_quote()
        await asyncio.sleep(0.5)
        build_data = await self.assemble(quote)
        await asyncio.sleep(0.5)
        tx_hash = await self.swap(build_data)
        if tx_hash:
            print(f"üîÅ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {tx_hash}\n")
            await asyncio.sleep(0.5)
            await self.client.wait_tx(tx_hash, self.client.explorer_url)


# –ü–æ–¥–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
async def load_data(network_: str) -> Dict[str, Any]:
    try:
        with open("networks_data.json", "r", encoding="utf-8") as file:
            networks_data = json.load(file)
        return networks_data[network_]
    except FileNotFoundError:
        print(f"‚ö†Ô∏è –§–∞–π–ª 'networks_data.json' –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        exit(1)
    except json.JSONDecodeError:
        print("‚ùå –û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON –≤ —Ñ–∞–π–ª–µ 'networks_data.json'.")
        exit(1)
    except KeyError:
        print(f"‚ùå –°–µ—Ç—å '{network_}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ 'networks_data.json'.")
        exit(1)


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main() -> None:
    print(f"‚ö°Ô∏è –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞...\n")
    await asyncio.sleep(1)

    print(f"üõ†Ô∏è –ò–º–ø–æ—Ä—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤...\n")
    validator = ConfigValidator("settings.json")
    settings = await validator.validate_config()
    network = settings["network"]
    network_data = await load_data(network)

    print(f"üõ†Ô∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞...\n")
    w3_client = Client(
        router_address=network_data["router_address"],
        from_address=network_data["from_address"],
        explorer_url=network_data["explorer_url"],
        to_address=network_data["to_address"],
        private_key=settings["private_key"],
        chain_id=network_data["chain_id"],
        rpc_url=network_data["rpc_url"],
        amount=settings["amount"],
        proxy=settings["proxy"],
    )
    odos_client = Odos(w3_client)

    print(f"üõ†Ô∏è –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–≤–∞–ø–∞...\n")
    await odos_client.execute()


if __name__ == "__main__":
    asyncio.run(main())
